# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt

snippet main "generate main function" b
int main(int argc, char** argv)
{
	${1}
	return 0;
}
endsnippet

snippet test "generate test code" b
#include <iostream>
using namespace std;
int main(int argc, char** argv)
{
	${1}
	return 0;
}
endsnippet

snippet cout "cout endl" b
std::cout << ${0} << std::endl;
endsnippet

snippet cerr "cerr endl" b
std::cerr << ${0} << std::endl;
endsnippet

snippet smart_ptr_free_malloc "deleter for smart_ptr malloc" b
struct smart_ptr_free_malloc {
	void operator()(void* x) {free(x);}
};
endsnippet
